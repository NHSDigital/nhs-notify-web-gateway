##
# Basic Required Variables for tfscaffold Components
##

variable "project" {
  type        = string
  description = "The name of the tfscaffold project"
}

variable "environment" {
  type        = string
  description = "The name of the tfscaffold environment"
}

variable "component" {
  type        = string
  description = "The name of the tfscaffold component"
}

variable "aws_account_id" {
  type        = string
  description = "The AWS Account ID (numeric)"
}

variable "region" {
  type        = string
  description = "The AWS Region"
}

variable "group" {
  type        = string
  description = "The name of the tfscaffold group"
  default     = null
}

variable "kms_key_arn" {
  type        = string
  description = "KMS key arn to use for this function"
}

##
# tfscaffold variables specific to this module
##

variable "module" {
  type        = string
  description = "The variable encapsulating the name of this module"
  default     = "lambda"
}

variable "default_tags" {
  type        = map(string)
  description = "A map of default tags to apply to all taggable resources within the component"
  default     = {}
}

##
# Variables specific to this module
##

variable "function_name" {
  type        = string
  description = "Base name of this lambda"
}

variable "function_module_name" {
  type        = string
  description = "The name of the function module as used by the lambda handler, e.g. index or exports"
  default     = "index"
}

variable "description" {
  type        = string
  description = "Description of the Lambda"
}

variable "handler_function_name" {
  type        = string
  description = "The name of the lambda handler function (passed directly to the Lambda's handler option)"
  default     = "handler"
}

variable "memory" {
  type        = number
  description = "The amount of memory to apply to the created Lambda"
}

variable "timeout" {
  type        = number
  description = "Timeout in seconds of the lambda function invocation"
}

variable "log_retention_in_days" {
  type        = number
  description = "The retention period in days for the Cloudwatch Logs events generated by the lambda function"
}

variable "runtime" {
  type        = string
  description = "The runtime to use for the lambda function"
}

variable "schedule" {
  type        = string
  description = "The fully qualified Cloudwatch Events schedule for when to run the lambda function, e.g. rate(1 day) or a cron() expression. Default disables all events resources"
  default     = ""
}

variable "iam_policy_document" {
  type = object({
    body = string
  })
  default = null
}

variable "lambda_env_vars" {
  type        = map(string)
  description = "Lambda environment parameters map"
  default     = {}
}

variable "function_code_base_path" {
  type        = string
  description = "The path to the sourcecode directories needed for this lambda"
  default     = "./"
}

variable "function_code_dir" {
  type        = string
  description = "The path to the sourcecode directories needed for this lambda"
}

variable "function_s3_bucket" {
  type        = string
  description = "The bucket to upload Lambda packages to"
}

variable "function_include_common" {
  type        = bool
  description = "Include the 'common' lambda module with this lambda"
  default     = true
}

variable "force_lambda_code_deploy" {
  type        = bool
  description = "If the lambda package in s3 has the same commit id tag as the terraform build branch, the lambda will not update automatically. Set to True if making changes to Lambda code from on the same commit for example during development"
  default     = false
}

variable "log_level" {
  type        = string
  description = "The log level to be used in lambda functions within the component. Any log with a lower severity than the configured value will not be logged: https://docs.python.org/3/library/logging.html#levels"
  default     = "INFO"
}

variable "log_subscription_lambda_create_permission" {
  type        = bool
  description = "Whether to create a permission for the log forwarder. Set to false if using a generic one."
  default     = true
}

variable "layers" {
  type        = list(any)
  description = "Lambda layer arns to include"
  default     = []
}

variable "vpc_config" {
  type        = map(any)
  description = "Lambdas can run in a VPC, should be a map containing a subnet_ids list and a security_group_ids list"
  default     = null
}

variable "enable_dlq_and_notifications" {
  type        = bool
  description = "Create an SQS Queue and on-failure destination to be used as the Lambda's Dead Letter Queue and notifications"
  default     = false
}

variable "sns_destination" {
  type        = string
  description = "SNS Topic ARN to be used for on-failure Lambda invocation records"
  default     = null
}

variable "sns_destination_kms_key" {
  type        = string
  description = "KMS Key ARN to be used for SNS Topic for on-failure Lambda invocation records"
  default     = null
}

variable "lambda_dlq_message_retention_seconds" {
  type        = number
  description = "KMS Key ARN to be used for SNS Topic for on-failure Lambda invocation records"
  default     = 86400
}

variable "application_log_level" {
  type        = string
  description = "The detail level of the logs the application sends to CloudWatch"
  default     = "INFO"
}

variable "system_log_level" {
  type        = string
  description = "The detail level of the Lambda platform event logs sent to CloudWatch"
  default     = "WARN"
}

variable "enable_lambda_insights" {
  type        = bool
  description = "Enable the lambda insights layer, this must be disabled for lambda@edge usage"
  default     = true
}

variable "lambda_at_edge" {
  type        = bool
  description = "Enable the lambda insights layer, this must be disabled for lambda@edge usage"
  default     = false
}
